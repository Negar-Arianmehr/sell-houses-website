.gallery {
  background-color: $color-grey-light-1;
  grid-column: full-start/ full-end;

  display: grid;
  grid-template-columns: repeat(8, 1fr);
  //because we want pictures to change when we change the size of screen>>>the viewport width unit.
  //seven rows with the height that is 5vw>>5% of viewport height
  //we could have used the FR unit here as well and so, that would have then divided equally the height of the container by the number of rows.
  //but maybe using viewport is more a bit more straightforward
  grid-template-rows: repeat(7, 5vw);
  grid-gap: 1.5rem;
  padding: 1.5rem;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //So, how can we fix that? What we're going to do is a small property that we've used before in another project called object fit,
  // and object fit is perfect for this because, remember, if we set object fit to cover,/it's like setting background size to cover
  //for the background image.So basically, having an image filling a container./What we're going to do here is to add a parent container
  // for each of these elements,then put the element in there and add object fit to that parent element. so we put every img in html in separate figure
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  &__item {

    &--1 {
      grid-row: 1/ span 2;
      grid-column: 1/ span 2;
    }

    &--2 {
      grid-row: 1/ span 3;
      grid-column: 3/ span 3;
    }

    &--3 {
      grid-row: 1/ span 2;
      grid-column: 6/ 7;
    }

    &--4 {
      grid-row: 1/ span 2;
      grid-column: 7/ -1;
    }

    &--5 {
      grid-row: 3/ span 3;
      grid-column: 1/ span 2;
    }

    &--6 {
      grid-row: 4/ span 2;
      grid-column: 3/ span 2;
    }


    &--7 {
      grid-row: 4/ span 1;
      grid-column: 5/ span 1;
    }

    &--8 {
      grid-row: 3/ span 2;
      grid-column: 6/ span 2;
    }

    &--9 {
      grid-row: 3/ span 3;
      grid-column: 8/ -1;
    }

    &--10 {
      grid-row: 6/ span 2;
      grid-column: 1/ 2;
    }

    &--11 {
      grid-row: 6/ span 2;
      grid-column: 2/ span 2;
    }

    &--12 {
      grid-row: 6/ span 2;
      grid-column: 4/ span 1;
    }

    &--13 {
      grid-row: 5/ span 3;
      grid-column: 5/ span 3;
    }

    &--14 {
      grid-row: 6/ span 2;
      grid-column: 8/ -1;
    }

  }

  &__img {
    //the all chidren get 100% of cell...but because of intrinsic aspect ratio it doesnt fit to the one cell
    width: 100%;
    height: 100%;
    object-fit: cover;
    //display: blick for img otherwise it always has this weird, small, white space after it because it's treated like an inline element
    display: block;
  }

}